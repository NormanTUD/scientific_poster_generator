name: Main tests

on:
  push:
    branches: "**"
  pull_request:
    branches: "**"

permissions:
  contents: read

env:
  DB_USER: 'poster_generator'

jobs:
  main-tests:
    permissions:
      contents: write

    environment: Production

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # - name: Grand folder permissions
    #   run: |
    #     sudo chmod a+rwX /var/cache/apt/archives
    #     ls -ld /var/cache/apt/archives

    - name: prepair cache environment
      run: |
        mkdir -p $HOME/cache

        mkdir -p $HOME/cache/.apt
        sudo chmod -R 700 $HOME/cache/.apt

        echo $USER
        echo "Ownership:"
        sudo ls -ld  $HOME/cache/.apt

        echo 'Dir::Cache::archives "/home/runner/cache/.apt";' | sudo tee /etc/apt/apt.conf.d/99custom-cache


        mkdir -p $HOME/cache/.pip
        pip config set global.cache-dir $HOME/cache/.pip
        echo "[global]" > $HOME/.config/pip/pip.conf
        echo "target = $HOME/cache/.pip" >> $HOME/.config/pip/pip.conf
        echo "PYTHONPATH=$HOME/cache/.pip" >> $GITHUB_ENV


        mkdir -p ~/cache/.driver

        mkdir -p ~/cache/.docker


    - name: Cache APT packages
      id: apt-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/cache/.apt
          ~/cache/.pip
          ~/cache/.driver
          ~/cache/.docker
        key: all-packages-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
        restore-keys: |
          all-packages-${{ runner.os }}-

    # - name: Move cached packages back
    #   run: |
    #     sudo cp ./apt-cache/*.deb /var/cache/apt/archives/ || true

    - name: Install dependencies
      if: steps.apt-cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade selenium
        pip install --upgrade mypy

        echo $'Package: *\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001' | sudo tee /etc/apt/preferences.d/mozilla-firefox
        sudo add-apt-repository -y ppa:mozillateam/ppa
        sudo apt-get update
        sudo apt install --reinstall mariadb-server
        sudo apt-get install --reinstall -y firefox
        sudo apt-get install --reinstall -y libx11-xcb-dev libxcb1-dev libdbus-1-3 libxtst6 libnss3 libgdk-pixbuf2.0-0

        GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep -o '"tag_name":"[^"]*"' | sed 's/"tag_name":"//;s/"$//')
        echo $GECKO_VERSION
        echo -----
        [[ $GECKO_VERSION='' ]] && GECKO_VERSION='v0.36.0'
        echo $GECKO_VERSION
        wget https://github.com/mozilla/geckodriver/releases/download/$GECKO_VERSION/geckodriver-$GECKO_VERSION-linux64.tar.gz
        tar -xzf geckodriver-$GECKO_VERSION-linux64.tar.gz
        chmod +x geckodriver
        sudo mv geckodriver $HOME/cache/.driver

        echo -------------------------------apt
        ls -la $HOME/cache/.apt
        echo -------------------------------pip
        ls -la $HOME/cache/.pip
        echo -------------------------------driver
        ls -la $HOME/cache/.driver/geckodriver

        docker pull mariadb:latest
        docker save -o $HOME/cache/.docker/image.tar mariadb:latest


    - name: install check
      continue-on-error: true
      run: |
        pip show mypy
        pip show selenium

        echo ---------
        sudo apt-config dump | grep Dir::Cache::archives
        echo ---------

        whereis firefox
        whereis geckodriver
        whereis mariadb-server
        dpkg -l | grep mariadb-server
        echo ---
        sudo mariadb -e "SHOW DATABASES;"


        echo -----------------------------------------------------------

        ls -ld /home/runner/cache/.apt
        ls -ld /home/runner/cache/.apt/partial
        ls -ld /home/runner/cache/.apt/lock

      # sudo -u _apt ls /home/runner/cache/.apt/partial
      # sudo -u _apt ls /home/runner/cache/.apt/lock

    - name: Debug directories
      run: |
        echo "APT cache contents:"
        ls -la $HOME/cache/.apt
        echo "Pip cache contents:"
        ls -la $HOME/cache/.pip
        echo "Driver cache contents:"
        ls -la $HOME/cache/.driver
        echo "Docker cache contents:"
        ls -la $HOME/cache/.docker

    - name: apt log
      run: |
        cat /var/log/apt/history.log

    - name: Grand folder permissions 2
      run: |
        sudo chmod -R 700 $HOME/cache/.apt


    # - name: Copy APT cache to workspace
    #   run: |
    #     mkdir -p ./apt-cache
    #     sudo cp /var/cache/apt/archives/*.deb ./apt-cache/


    # - name: Pull MariaDB image manually
    #   run: docker pull mariadb:latest

    - name: load docker image
      run: |
        docker load -i $HOME/cache/.docker/image.tar

    - uses: getong/mariadb-action@v1.11
      with:
        host port: 3800
        container port: 3307
        character set server: 'utf8'
        collation server: 'utf8_general_ci'
        mariadb version: 'latest'
        mysql database: 'some_test'
        mysql root password: password
        mysql user: ${{ env.DB_USER }}
        mysql password: password

    - name: Manage Server
      run: |
        php -S 0.0.0.0:8080 -t /home/runner/work/scientific_poster_generator &
        sleep 5
        netstat -tuln
        ps aux | grep php

    - name: Run test script
      run: |
        curl -v http://127.0.0.1:8080/scientific_poster_generator/login.php
        echo -----------------
        ./tests/test_env


    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: tests/test_report.json

    - name: Archive Changed Database After Tests
      uses: actions/upload-artifact@v4
      with:
        name: store-post-test-sql
        path: tests/post_test.sql
